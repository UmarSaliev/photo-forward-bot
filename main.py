import os
import logging
import asyncio
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
from openai import AsyncOpenAI

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OWNER_IDS = os.getenv("OWNER_IDS", "")
OWNER_IDS = list(map(int, OWNER_IDS.split(","))) if OWNER_IDS else []

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    commands = (
        "/check ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π\n"
        "/task ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–∞—á—É\n"
        "/definition ‚Äî –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–Ω—è—Ç–∏—è\n"
        "/formula ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É–ª—É\n"
        "/theorem ‚Äî —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–æ—Ä–µ–º—É\n"
        "/broadcast ‚Äî [–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤] –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º"
    )
    await update.message.reply_text(f"üìò –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n{commands}")

# --- –ò–ò-—Ñ—É–Ω–∫—Ü–∏–∏ ---
async def ask_openai(prompt: str) -> str:
    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=1000
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò."

# --- –ö–æ–º–∞–Ω–¥—ã /check, /task –∏ –¥—Ä. ---
async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–¥–∞—á—É –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –µ—ë —Ä–µ—à–∏—Ç—å.")
    context.user_data["awaiting_check"] = True

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_check"):
        photo = update.message.photo[-1]
        file = await photo.get_file()
        file_path = "/tmp/temp.jpg"
        await file.download_to_drive(file_path)

        await update.message.reply_text("üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É—é —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏ —Ä–µ—à–∏—Ç—å...")
        # ‚ö†Ô∏è –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å OCR –∏–ª–∏ –º–æ–¥–µ–ª—å—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
        await update.message.reply_text("–ü–æ–∫–∞ —è –Ω–µ —É–º–µ—é —Ä–µ—à–∞—Ç—å —Ñ–æ—Ç–æ, –Ω–æ —Å–∫–æ—Ä–æ –Ω–∞—É—á—É—Å—å üòâ")
        context.user_data["awaiting_check"] = False
    elif update.message.from_user.id in OWNER_IDS:
        # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—ã –ø–æ–ª—É—á–∞—é—Ç —Ñ–æ—Ç–æ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã
        await update.message.forward(chat_id=OWNER_IDS[0])

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_check"):
        response = await ask_openai(update.message.text)
        await update.message.reply_text(f"üì• –û—Ç–≤–µ—Ç:\n{response}")
        context.user_data["awaiting_check"] = False

async def task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = "–ü—Ä–∏–¥—É–º–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –¥–ª—è —É—á–µ–Ω–∏–∫–∞ —Å—Ä–µ–¥–Ω–µ–π —à–∫–æ–ª—ã."
    response = await ask_openai(prompt)
    await update.message.reply_text(response)

async def definition_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = "–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ."
    response = await ask_openai(prompt)
    await update.message.reply_text(response)

async def formula_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = "–ü—Ä–∏–≤–µ–¥–∏ –ø–æ–ª–µ–∑–Ω—É—é –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É–ª—É –∏ –æ–±—ä—è—Å–Ω–∏ –µ—ë."
    response = await ask_openai(prompt)
    await update.message.reply_text(response)

async def theorem_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = "–ù–∞–∑–æ–≤–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–µ–æ—Ä–µ–º—É –∏ –æ–±—ä—è—Å–Ω–∏ –µ—ë."
    response = await ask_openai(prompt)
    await update.message.reply_text(response)

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in OWNER_IDS:
        return await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –±–æ—Ç–∞.")
    msg = " ".join(context.args)
    if not msg:
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    for uid in OWNER_IDS:
        try:
            await context.bot.send_message(chat_id=uid, text=f"[üì¢ –†–∞—Å—Å—ã–ª–∫–∞]\n{msg}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {uid}: {e}")
    await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("check", check_command))
    app.add_handler(CommandHandler("task", task_command))
    app.add_handler(CommandHandler("definition", definition_command))
    app.add_handler(CommandHandler("formula", formula_command))
    app.add_handler(CommandHandler("theorem", theorem_command))
    app.add_handler(CommandHandler("broadcast", broadcast))

    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
