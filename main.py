import logging
import os
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_IDS_ENV = os.getenv("OWNER_IDS", "")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É OWNER_IDS –≤ —Å–ø–∏—Å–æ–∫ int
OWNER_IDS = [int(x) for x in OWNER_IDS_ENV.split(",") if x.strip().isdigit()]

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø Telegram-–±–æ—Ç. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)\n"
        "/broadcast ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)"
    )

# –ö–æ–º–∞–Ω–¥–∞ /ping
async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üèì Pong!")

# –ö–æ–º–∞–Ω–¥–∞ /status
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")

# –ö–æ–º–∞–Ω–¥–∞ /list (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º)
async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in OWNER_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: (–∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫)")

# –ö–æ–º–∞–Ω–¥–∞ /broadcast <—Ç–µ–∫—Å—Ç> (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º)
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in OWNER_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    text = " ".join(context.args)
    if not text:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /broadcast –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!")
        return
    # –†–∞–∑–æ—à–ª—ë–º –≤—Å–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º¬†ID (–Ω—É–∂–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è user_ids)
    await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (—ç–º—É–ª—è—Ü–∏—è).")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("list", list_command))
    app.add_handler(CommandHandler("broadcast", broadcast))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
