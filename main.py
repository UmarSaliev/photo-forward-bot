import logging
import os
from telegram import Update, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import aiohttp
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("BOT_TOKEN")
OWNER_IDS = list(map(int, os.getenv("OWNER_IDS", "").split(","))) if os.getenv("OWNER_IDS") else []
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
BOT_USERNAME = "@JalilSupportBot"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "@MathTeacherBot")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def ask_ai(prompt):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": f"https://t.me/{BOT_USERNAME[1:]}",
        "X-Title": "MathHelperBot"
    }
    json_data = {
        "model": "openrouter/meta-llama/llama-3-8b-instruct:free",
        "messages": [{"role": "user", "content": prompt}]
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=json_data,
            timeout=aiohttp.ClientTimeout(total=15) as resp:
            data = await resp.json()
            return data["choices"][0]["message"]["content"]

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/task - –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/formula - –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É\n"
        "/theorem - –¢–µ–æ—Ä–µ–º–∞\n"
        "/search - –ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ\n"
    )
    if update.effective_user.id in OWNER_IDS:
        help_text += "\n–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É—á–∏—Ç–µ–ª—è:\n/broadcast - –†–∞—Å—Å—ã–ª–∫–∞\n/list - –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤"
    await update.message.reply_text(help_text)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    
    prompt = update.message.text
    try:
        response = await ask_ai(prompt)
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if OWNER_IDS:
        photo = update.message.photo[-1].file_id
        caption = f"üì∏ –§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.message.from_user.username or update.message.from_user.id}"
        for owner_id in OWNER_IDS:
            await context.bot.send_photo(chat_id=owner_id, photo=photo, caption=caption)
        await update.message.reply_text("üì§ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∏—Ç–µ–ª—é!")
    else:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.")

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ...

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.PHOTO & ~filters.COMMAND, handle_photo))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    
    app.add_error_handler(error_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
