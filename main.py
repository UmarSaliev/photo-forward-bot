import logging
import os
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import requests

OWNER_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≥–ª–∞–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –º–∏—Å—Ç–µ—Ä–∞ –ê–±–¥—É–∂–∞–ª–∏–ª–∞ ü§ì. –¢—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –º–Ω–µ –∑–∞–¥–∞—á–∏ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏ —è –ø–µ—Ä–µ–¥–∞–º –∏—Ö –µ–º—É üöÄ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ç–∫–æ –≤—ã–¥–µ–ª–∏ —Å–∞–º—É –∑–∞–¥–∞—á—É –∏–ª–∏ –ø—Ä–∏–º–µ—Ä –∏ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –æ–±—å—è—Å–Ω–∏—Ç—å –≤ —á–µ–º —Ç—ã –∑–∞–ø—É—Ç–∞–ª—Å—è üíØ.\n"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ /check –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—Å—Ç–µ –∏–ª–∏ —Ñ–æ—Ç–æ!")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_states.get(user_id) == "awaiting_check":
        user_states[user_id] = None
        await process_with_ai(update, update.message.text)
    else:
        await update.message.reply_text("üîç –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π /check.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_states.get(user_id) == "awaiting_check":
        user_states[user_id] = None
        photo_file = await update.message.photo[-1].get_file()
        file_path = f"photo_{user_id}.jpg"
        await photo_file.download_to_drive(file_path)
        await update.message.reply_text("üì∏ –§–æ—Ç–æ –∑–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ò–ò...")
        await process_with_ai(update, f"[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {file_path}]")  # –ú–æ–∂–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å OCR –ø–æ–∑–∂–µ
    elif user_id in OWNER_IDS:
        await context.bot.send_photo(chat_id=OWNER_IDS[0], photo=update.message.photo[-1].file_id)

async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_states[update.effective_user.id] = "awaiting_check"
    await update.message.reply_text("üîç –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

async def process_with_ai(update: Update, prompt: str):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
    }

    body = {
        "model": "openai/gpt-3.5-turbo",  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä mistralai/mistral-7b
        "messages": [
            {"role": "system", "content": "–¢—ã ‚Äî –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π —á—ë—Ç–∫–æ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Ç–µ–º–µ."},
            {"role": "user", "content": prompt},
        ],
    }

    try:
        response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=body)
        data = response.json()

        if "choices" in data:
            reply = data["choices"][0]["message"]["content"]
            await update.message.reply_text(reply)
        else:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò.")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ò–ò:\n{e}")

async def task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await process_with_ai(update, "–ü—Ä–∏–¥—É–º–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ.")

async def definition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await process_with_ai(update, "–û–±—ä—è—Å–Ω–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω.")

async def formula(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await process_with_ai(update, "–ü—Ä–∏–≤–µ–¥–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É–ª—É —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º.")

async def theorem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await process_with_ai(update, "–ù–∞–∑–æ–≤–∏ –∏ –æ–±—ä—è—Å–Ω–∏ –≤–∞–∂–Ω—É—é –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–µ–æ—Ä–µ–º—É.")

def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("check", check))
    application.add_handler(CommandHandler("task", task))
    application.add_handler(CommandHandler("definition", definition))
    application.add_handler(CommandHandler("formula", formula))
    application.add_handler(CommandHandler("theorem", theorem))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()
