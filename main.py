import logging
import os
import asyncio

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_IDS = os.getenv("OWNER_IDS", "").split(",")

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ —É—á–∏—Ç–µ–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ ü§ñüìê")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("/check ‚Äî —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É\n/task ‚Äî –¥–∞–π –∑–∞–¥–∞—á—É\n/formula ‚Äî —Ñ–æ—Ä–º—É–ª–∞\n/theorem ‚Äî —Ç–µ–æ—Ä–µ–º–∞\n/definition ‚Äî –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")

async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        await update.message.reply_text("üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å –∑–∞–¥–∞—á–µ–π... (–≤ –±—É–¥—É—â–µ–º ‚Äî —á–µ—Ä–µ–∑ –ò–ò)")
        # –¢—É—Ç –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    else:
        await update.message.reply_text("üîç –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

async def task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–æ—Ç —Ç–µ–±–µ –∑–∞–¥–∞—á–∞: –ù–∞–π–¥–∏ x, –µ—Å–ª–∏ 2x + 3 = 7")

async def definition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: –ü–µ—Ä–∏–º–µ—Ç—Ä ‚Äî —ç—Ç–æ —Å—É–º–º–∞ –¥–ª–∏–Ω –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω —Ñ–∏–≥—É—Ä—ã.")

async def formula(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–§–æ—Ä–º—É–ª–∞: –ü–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞ = œÄ * r¬≤")

async def theorem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–¢–µ–æ—Ä–µ–º–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞: a¬≤ + b¬≤ = c¬≤")

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in OWNER_IDS:
        return await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    if not context.args:
        return await update.message.reply_text("‚úâÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π: /broadcast <—Ç–µ–∫—Å—Ç>")

    message = "üì¢ –†–∞—Å—Å—ã–ª–∫–∞:\n" + " ".join(context.args)
    for user_id in context.bot_data.get("users", set()):
        try:
            await context.bot.send_message(chat_id=user_id, text=message)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def register_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    context.bot_data.setdefault("users", set()).add(user_id)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("check", check))
    app.add_handler(CommandHandler("task", task))
    app.add_handler(CommandHandler("definition", definition))
    app.add_handler(CommandHandler("formula", formula))
    app.add_handler(CommandHandler("theorem", theorem))
    app.add_handler(CommandHandler("broadcast", broadcast))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —é–∑–µ—Ä–æ–≤
    app.add_handler(MessageHandler(filters.ALL, register_user), group=1)

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()


# –ó–∞–ø—É—Å–∫ —Å —É—á–µ—Ç–æ–º Railway –∏–ª–∏ Jupyter
if __name__ == "__main__":
    try:
        asyncio.get_event_loop().run_until_complete(main())
    except RuntimeError as e:
        import nest_asyncio
        nest_asyncio.apply()
        asyncio.get_event_loop().run_until_complete(main())
