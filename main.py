import logging
import os
from telegram import Update, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import aiohttp
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("BOT_TOKEN")
OWNER_IDS = list(map(int, os.getenv("OWNER_IDS", "").split(",")))
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# AI-–∑–∞–ø—Ä–æ—Å –∫ OpenRouter
async def ask_ai(prompt):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://t.me/YourBotUsername",  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞
        "X-Title": "MathHelperBot"
    }
    json_data = {
        "model": "openrouter/meta-llama/llama-3-8b-instruct:free",
        "messages": [{"role": "user", "content": prompt}]
    }
    async with aiohttp.ClientSession() as session:
        async with session.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=json_data) as resp:
            data = await resp.json()
            return data["choices"][0]["message"]["content"]

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã: /task, /check, /definition, /formula, /theorem")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìò –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/task <–∑–∞–¥–∞—á–∞> ‚Äî —Ä–µ—à—É –∑–∞–¥–∞—á—É\n"
        "/check <—Ä–µ—à–µ–Ω–∏–µ> ‚Äî –ø—Ä–æ–≤–µ—Ä—é —Ä–µ—à–µ–Ω–∏–µ\n"
        "/definition <—Ç–µ—Ä–º–∏–Ω> ‚Äî –¥–∞–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ\n"
        "/formula <—Ç–µ–º–∞> ‚Äî –ø–æ–∫–∞–∂—É —Ñ–æ—Ä–º—É–ª—É\n"
        "/theorem <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –æ–±—ä—è—Å–Ω—é —Ç–µ–æ—Ä–µ–º—É"
    )

async def task_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = "–†–µ—à–∏ –∑–∞–¥–∞—á—É: " + ' '.join(context.args)
    response = await ask_ai(prompt)
    await update.message.reply_text(response)

async def check_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = "–ü—Ä–æ–≤–µ—Ä—å —Ä–µ—à–µ–Ω–∏–µ: " + ' '.join(context.args)
    response = await ask_ai(prompt)
    await update.message.reply_text(response)

async def definition_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = "–î–∞–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: " + ' '.join(context.args)
    response = await ask_ai(prompt)
    await update.message.reply_text(response)

async def formula_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = "–§–æ—Ä–º—É–ª–∞ –ø–æ —Ç–µ–º–µ: " + ' '.join(context.args)
    response = await ask_ai(prompt)
    await update.message.reply_text(response)

async def theorem_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = "–û–±—ä—è—Å–Ω–∏ —Ç–µ–æ—Ä–µ–º—É: " + ' '.join(context.args)
    response = await ask_ai(prompt)
    await update.message.reply_text(response)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = update.message.text
    response = await ask_ai(prompt)
    await update.message.reply_text(response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("task", task_cmd))
    app.add_handler(CommandHandler("check", check_cmd))
    app.add_handler(CommandHandler("definition", definition_cmd))
    app.add_handler(CommandHandler("formula", formula_cmd))
    app.add_handler(CommandHandler("theorem", theorem_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await app.updater.idle()

# Railway / –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    import asyncio
    asyncio.get_event_loop().create_task(main())
    asyncio.get_event_loop().run_forever()
