import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.utils.markdown import hbold
import asyncio
import os

BOT_TOKEN = os.getenv("8189283086:AAGR_QF2NuupIZA4G_Fhys_81CU-9-BOWaU")
OWNER_IDS = {95293299, 784341697}  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ Telegram ID –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

user_names = set()
user_ids = set()

@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å –∑–∞–¥–∞–Ω–∏–µ–º, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ —É—á–∏—Ç–µ–ª—é.")

@dp.message(Command("help"))
async def help_cmd(message: Message):
    await message.answer(
        "üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start ‚Äì –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/help ‚Äì –°–ø—Ä–∞–≤–∫–∞\n"
        "/list ‚Äì –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª—è)\n"
        "/status ‚Äì –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞\n"
        "/ping ‚Äì –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏\n"
        "/broadcast ‚Äì –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç —É—á–∏—Ç–µ–ª—è"
    )

@dp.message(Command("list"))
async def list_users(message: Message):
    if message.from_user.id not in OWNER_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    if not user_names:
        await message.answer("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–ª —Ñ–æ—Ç–æ.")
    else:
        response = "üìã <b>–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:</b>\n"
        for name in user_names:
            response += f"‚Äì {hbold(name)}\n"
        await message.answer(response)

@dp.message(Command("status"))
async def status_cmd(message: Message):
    await message.answer("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–Ω–æ.")

@dp.message(Command("ping"))
async def ping_cmd(message: Message):
    await message.answer("–î–∞, –¥–∞ —è –∑–¥–µ—Å—å, –Ω–µ –±–µ—Å–ø–æ–∫–æ–π—Å—è")

@dp.message(F.text.startswith("/broadcast"))
async def broadcast_cmd(message: Message):
    if message.from_user.id not in OWNER_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    parts = message.text.split(" ", 1)
    if len(parts) < 2:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: /broadcast –ó–∞–≤—Ç—Ä–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
        return

    text_to_send = parts[1]
    success, fail = 0, 0
    for user_id in user_ids:
        try:
            await bot.send_message(user_id, f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∏—Ç–µ–ª—è:\n{text_to_send}")
            success += 1
        except:
            fail += 1

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success}, –Ω–µ —É–¥–∞–ª–æ—Å—å: {fail}")

@dp.message(F.photo)
async def handle_photo(message: Message):
    user_names.add(message.from_user.full_name)
    user_ids.add(message.from_user.id)

    for owner_id in OWNER_IDS:
        await message.copy_to(owner_id)

    await message.answer("‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–º–æ—Ç—Ä–∏—Ç.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
