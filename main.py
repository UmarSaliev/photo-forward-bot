import logging
import os
from telegram import Update, InputFile
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes
)
from openrouter import OpenRouter

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("BOT_TOKEN")
OWNER_IDS = [int(uid) for uid in os.getenv("OWNER_IDS", "").split(",") if uid]

# OpenRouter –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
OR_API_KEY = os.getenv("OPENROUTER_API_KEY")
MODEL = "openrouter/mistralai/mixtral-8x7b"
or_client = OpenRouter(api_key=OR_API_KEY)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≥–ª–∞–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –º–∏—Å—Ç–µ—Ä–∞ –ê–±–¥—É–∂–∞–ª–∏–ª–∞ ü§ì. –¢—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –º–Ω–µ –∑–∞–¥–∞—á–∏ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏ —è –ø–µ—Ä–µ–¥–∞–º –∏—Ö –µ–º—É üöÄ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ç–∫–æ –≤—ã–¥–µ–ª–∏ —Å–∞–º—É –∑–∞–¥–∞—á—É –∏–ª–∏ –ø—Ä–∏–º–µ—Ä –∏ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –æ–±—å—è—Å–Ω–∏—Ç—å –≤ —á–µ–º —Ç—ã –∑–∞–ø—É—Ç–∞–ª—Å—è üíØ."
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É üíª\n"
        "/help ‚Äî –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã üìñ\n"
        "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å —Å —Ö–æ—Å—Ç–æ–º üåê\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ ü§ñ\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–∏—Ö –∑–∞–¥–∞–Ω–∏—è ü§ì (—Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª—è)\n"
        "/broadcast ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ‚úàÔ∏è (—Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª—è)\n"
        "/task <–∑–∞–ø—Ä–æ—Å> ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ üìå\n"
        "/definition <—Ç–µ–º–∞> ‚Äî –¥–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞ üìò\n"
        "/formula <—Ç–µ–º–∞> ‚Äî –≤—ã–¥–∞—Ç—å —Ñ–æ—Ä–º—É–ª—É üìê\n"
        "/theorem <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –æ–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–æ—Ä–µ–º—É üìè\n"
        "/check <–∑–∞–¥–∞—á–∞> ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É ‚úçÔ∏è"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏
async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üèì Pong! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.")

# –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

# –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞, —Ç.–∫. –±–∞–∑–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞)
students = set()

async def list_students(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in OWNER_IDS:
        return await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    
    if not students:
        return await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –∑–∞–¥–∞–Ω–∏—è.")

    names = [str(s) for s in students]
    await update.message.reply_text("üë®‚Äçüéì –£—á–µ–Ω–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏–≤—à–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n" + "\n".join(names))

# –†–∞—Å—Å—ã–ª–∫–∞
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in OWNER_IDS:
        return await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    
    text = " ".join(context.args)
    if not text:
        return await update.message.reply_text("‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")

    count = 0
    for user_id in students:
        try:
            await context.bot.send_message(chat_id=user_id, text=text)
            count += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫
async def ai_response(prompt: str) -> str:
    try:
        response = or_client.chat.completions.create(
            model=MODEL,
            messages=[{"role": "user", "content": prompt}],
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ AI: {e}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ AI-–∫–æ–º–∞–Ω–¥
def make_ai_handler(prefix: str):
    async def handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = " ".join(context.args)
        if not query:
            await update.message.reply_text(f"üì• –£–∫–∞–∂–∏ —Ç–µ–º—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /{prefix} –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è")
            return

        students.add(update.effective_user.id)
        prompt = f"{prefix.capitalize()} –ø–æ —Ç–µ–º–µ '{query}' –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–∞."
        result = await ai_response(prompt)
        await update.message.reply_text(result)
    return handler

check = make_ai_handler("–†–µ—à–∏ –∑–∞–¥–∞—á—É")
definition = make_ai_handler("–î–∞–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
formula = make_ai_handler("–í—ã–≤–µ–¥–∏ —Ñ–æ—Ä–º—É–ª—É")
theorem = make_ai_handler("–û–±—ä—è—Å–Ω–∏ —Ç–µ–æ—Ä–µ–º—É")
task = make_ai_handler("–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–¥–∞—á—É")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("ping", ping))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("list", list_students))
    application.add_handler(CommandHandler("broadcast", broadcast))

    application.add_handler(CommandHandler("check", check))
    application.add_handler(CommandHandler("definition", definition))
    application.add_handler(CommandHandler("formula", formula))
    application.add_handler(CommandHandler("theorem", theorem))
    application.add_handler(CommandHandler("task", task))

    application.run_polling()
