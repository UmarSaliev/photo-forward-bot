import logging
import os
from telegram import Update, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import aiohttp
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("BOT_TOKEN")
OWNER_IDS = list(map(int, os.getenv("OWNER_IDS", "").split(","))) if os.getenv("OWNER_IDS") else []
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
BOT_USERNAME = "@JalilSupportBot"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "@MathHelperBot")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è OWNER_IDS)
async def is_owner(update: Update) -> bool:
    return update.effective_user.id in OWNER_IDS

# AI-–∑–∞–ø—Ä–æ—Å –∫ OpenRouter
async def ask_ai(prompt):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": f"https://t.me/{BOT_USERNAME[1:]}",  # –£–±–∏—Ä–∞–µ–º @ –∏–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞
        "X-Title": "MathHelperBot"
    }
    json_data = {
        "model": "openrouter/meta-llama/llama-3-8b-instruct:free",
        "messages": [{"role": "user", "content": prompt}]
    }
    async with aiohttp.ClientSession() as session:
        async with session.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=json_data) as resp:
            data = await resp.json()
            return data["choices"][0]["message"]["content"]

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É –∏–ª–∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ!")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/task - —Ä–µ—à–∏ –∑–∞–¥–∞—á—É\n"
        "/formula - —Ñ–æ—Ä–º—É–ª–∞\n"
        "/theorem - —Ç–µ–æ—Ä–µ–º–∞\n"
        "/search - –ø–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ\n"
    )
    if await is_owner(update):
        help_text += "\n–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É—á–∏—Ç–µ–ª—è:\n/broadcast - —Ä–∞—Å—Å—ã–ª–∫–∞\n/list - —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤"
    await update.message.reply_text(help_text)

async def task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = "–†–µ—à–∏ –∑–∞–¥–∞—á—É: " + " ".join(context.args)
    response = await ask_ai(prompt)
    await update.message.reply_text(response)

async def formula(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = "–§–æ—Ä–º—É–ª–∞: " + " ".join(context.args)
    response = await ask_ai(prompt)
    await update.message.reply_text(response)

async def theorem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = "–¢–µ–æ—Ä–µ–º–∞: " + " ".join(context.args)
    response = await ask_ai(prompt)
    await update.message.reply_text(response)

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        await update.message.reply_text("üîé –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    else:
        prompt = "–ü–æ–∏—Å–∫: " + " ".join(context.args)
        response = await ask_ai(prompt)
        await update.message.reply_text(response)

# –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è OWNER_IDS
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_owner(update):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)
    await update.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")

async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_owner(update):
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤: ...")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –û–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("task", task))
    app.add_handler(CommandHandler("formula", formula))
    app.add_handler(CommandHandler("theorem", theorem))
    app.add_handler(CommandHandler("search", search))
    
    # –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
    app.add_handler(CommandHandler("broadcast", broadcast))
    app.add_handler(CommandHandler("list", list_users))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–∞
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.PHOTO & ~filters.COMMAND, handle_photo))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
