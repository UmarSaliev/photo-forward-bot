import logging
import os
import httpx
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, ContextTypes, MessageHandler, filters
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN       = os.getenv("BOT_TOKEN")
OWNER_IDS   = [int(uid) for uid in os.getenv("OWNER_IDS", "").split(",") if uid]
OR_API_KEY  = os.getenv("OPENROUTER_API_KEY")
MODEL       = "openrouter/mistralai/mixtral-8x7b"
students    = set()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# AI-–∑–∞–ø—Ä–æ—Å
async def ai_response(prompt: str) -> str:
    url     = "https://openrouter.ai/api/v1/chat/completions"
    headers = {"Authorization": f"Bearer {OR_API_KEY}"}
    payload = {
        "model": MODEL,
        "messages": [{"role": "user", "content": prompt}]
    }

    try:
        async with httpx.AsyncClient() as client:
            r = await client.post(url, headers=headers, json=payload)
            body = r.text  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
            if r.status_code != 200:
                logger.error("OpenRouter %s ‚Üí %s", r.status_code, body)
                return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ AI: –∫–æ–¥ {r.status_code}\n\n{body}"
            data = r.json()
            return data["choices"][0]["message"]["content"].strip()
    except Exception as e:
        logger.exception("AI request failed")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ AI: {e}"

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≥–ª–∞–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –º–∏—Å—Ç–µ—Ä–∞ –ê–±–¥—É–∂–∞–ª–∏–ª–∞ ü§ì. "
        "–¢—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –º–Ω–µ –∑–∞–¥–∞—á–∏, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –∏ —è –ø–µ—Ä–µ–¥–∞–º –∏—Ö –µ–º—É üöÄ. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ç–∫–æ –≤—ã–¥–µ–ª–∏ —Å–∞–º—É –∑–∞–¥–∞—á—É –∏ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –æ–±—ä—è—Å–Ω–∏—Ç—å, –≤ —á–µ–º —Ç—ã –∑–∞–ø—É—Ç–∞–ª—Å—è üíØ.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã\n"
        "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é)\n"
        "/broadcast ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ (—Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é)\n"
        "/task <—Ç–µ–º–∞> ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É\n"
        "/definition <—Ç–µ–º–∞> ‚Äî –¥–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ\n"
        "/formula <—Ç–µ–º–∞> ‚Äî –≤—ã–¥–∞—Ç—å —Ñ–æ—Ä–º—É–ª—É\n"
        "/theorem <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –æ–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–æ—Ä–µ–º—É\n"
        "/check <–∑–∞–¥–∞—á–∞> ‚Äî —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üèì Pong!")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω.")

async def list_students(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in OWNER_IDS:
        return await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    if not students:
        return await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –∑–∞–¥–∞–Ω–∏—è.")
    await update.message.reply_text("üë®‚Äçüéì –£—á–µ–Ω–∏–∫–∏:\n" + "\n".join(map(str, students)))

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in OWNER_IDS:
        return await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    text = " ".join(context.args)
    if not text:
        return await update.message.reply_text("‚úèÔ∏è –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /broadcast")
    sent = 0
    for uid in students:
        try:
            await context.bot.send_message(chat_id=uid, text=text)
            sent += 1
        except:
            pass
    await update.message.reply_text(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä AI‚Äë–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def make_ai_handler(prefix: str):
    async def handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = " ".join(context.args)
        if not query:
            return await update.message.reply_text(f"üì• –£–∫–∞–∂–∏ —Ç–µ–º—É –ø–æ—Å–ª–µ /{prefix}")
        students.add(update.effective_user.id)
        prompt = f"{prefix.capitalize()} –ø–æ —Ç–µ–º–µ '{query}' –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏."
        res = await ai_response(prompt)
        await update.message.reply_text(res)
    return handler

check      = make_ai_handler("—Ä–µ—à–∏ –∑–∞–¥–∞—á—É")
definition = make_ai_handler("–¥–∞–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
formula    = make_ai_handler("–≤—ã–≤–µ–¥–∏ —Ñ–æ—Ä–º—É–ª—É")
theorem    = make_ai_handler("–æ–±—ä—è—Å–Ω–∏ —Ç–µ–æ—Ä–µ–º—É")
task       = make_ai_handler("—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–¥–∞—á—É")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —É—á–∏—Ç–µ–ª—é
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    students.add(update.effective_user.id)
    for oid in OWNER_IDS:
        await context.bot.forward_message(
            chat_id=oid,
            from_chat_id=update.effective_chat.id,
            message_id=update.message.message_id
        )
    await update.message.reply_text("üì® –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∏—Ç–µ–ª—é.")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("list", list_students))
    app.add_handler(CommandHandler("broadcast", broadcast))
    app.add_handler(CommandHandler("check", check))
    app.add_handler(CommandHandler("definition", definition))
    app.add_handler(CommandHandler("formula", formula))
    app.add_handler(CommandHandler("theorem", theorem))
    app.add_handler(CommandHandler("task", task))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.run_polling()
