import logging
import os
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_IDS_ENV = os.getenv("OWNER_IDS", "")

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

OWNER_IDS = [int(x) for x in OWNER_IDS_ENV.split(",") if x.strip().isdigit()]

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≥–ª–∞–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –º–∏—Å—Ç–µ—Ä–∞ –ê–±–¥—É–∂–∞–ª–∏–ª–∞ ü§ì. –¢—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ—Å—ã–ª–∞—Å—Ç—å –º–Ω–µ –∑–∞–¥–∞—á–∏ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏ —è –ø–µ—Ä–µ–¥–∞–º –∏—Ö –µ–º—É üöÄ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ç–∫–æ –≤—ã–¥–µ–ª–∏ —Å–∞–º—É –∑–∞–¥–∞—á—É –∏–ª–∏ –ø—Ä–∏–º–µ—Ä –∏ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –æ–±—å—è—Å–Ω–∏—Ç—å –≤ —á–µ–º —Ç—ã –∑–∞–ø—É—Ç–∞–ª—Å—è üíØ.")

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É üíª\n"
        "/help ‚Äî –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã üìñ\n"
        "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å —Å —Ö–æ—Å—Ç–æ–º üåê\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ ü§ñ\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏–≤—à–∏—Ö –∑–∞–¥–∞–Ω–∏—è ü§ì(–¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é)\n"
        "/broadcast ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ‚úàÔ∏è(–¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é)"
    )

# /ping
async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–Ø –∑–¥–µ—Å—å, –Ω–µ –±–µ—Å–ø–æ–∫–æ–π—Å—è –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å.")

# /status
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–Ω–æ.")

# /list (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)
async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in OWNER_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–≥—Ä—É–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤: ...")

# /broadcast —Ç–µ–∫—Å—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in OWNER_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    text = " ".join(context.args)
    if not text:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /broadcast –≤–∞—à —Ç–µ–∫—Å—Ç")
        return
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º user_ids
    await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì∑ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ!")

def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("list", list_command))
    app.add_handler(CommandHandler("broadcast", broadcast))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()  # –ë–ª–æ–∫–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–≤–æ–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π

if __name__ == "__main__":
    main()
