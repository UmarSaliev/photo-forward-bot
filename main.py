import logging
import os
from telegram import Update, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import openai
from io import BytesIO

# –õ–æ–≥–≥–∏–Ω–≥
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OWNER_IDS = os.getenv("OWNER_IDS", "")
OWNER_IDS = set(map(int, OWNER_IDS.split(","))) if OWNER_IDS else set()

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–∞ OpenAI
openai.api_key = OPENAI_API_KEY

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò
async def ask_openai(prompt: str) -> str:
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=300,
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenAI: {e}"

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —É—á–∏—Ç–µ–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/task ‚Äî –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n"
        "/definition ‚Äî –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞\n"
        "/formula ‚Äî –≤—ã–¥–∞—á–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª\n"
        "/theorem ‚Äî –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ–æ—Ä–µ–º—ã\n"
        "/check ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —Å –∑–∞–¥–∞—á–µ–π"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å AI
async def handle_ai_command(update: Update, context: ContextTypes.DEFAULT_TYPE, prefix: str):
    query = " ".join(context.args)
    if not query:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    prompt = f"{prefix}: {query}"
    reply = await ask_openai(prompt)
    await update.message.reply_text(reply)

async def task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_ai_command(update, context, "–û–±—ä—è—Å–Ω–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ")

async def definition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_ai_command(update, context, "–î–∞–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ")

async def formula(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_ai_command(update, context, "–ü—Ä–∏–≤–µ–¥–∏ —Ñ–æ—Ä–º—É–ª—É")

async def theorem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_ai_command(update, context, "–û–±—ä—è—Å–Ω–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–µ–æ—Ä–µ–º—É")

# /check
async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message:
        msg = update.message.reply_to_message
        if msg.text:
            response = await ask_openai(f"–†–µ—à–∏ –∑–∞–¥–∞—á—É: {msg.text}")
            await update.message.reply_text(response)
        elif msg.photo:
            await update.message.reply_text("üì∑ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    else:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è, –µ—Å–ª–∏ –Ω–µ /check)
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in OWNER_IDS:
        return  # –ù–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∞–º–∏–º —Å–µ–±–µ
    # –ï—Å–ª–∏ –Ω–µ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /check, —Ñ–æ—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è OWNER
    if context.chat_data.get("checking"):
        return
    for owner_id in OWNER_IDS:
        await context.bot.forward_message(chat_id=owner_id, from_chat_id=update.effective_chat.id, message_id=update.message.message_id)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("task", task))
    app.add_handler(CommandHandler("definition", definition))
    app.add_handler(CommandHandler("formula", formula))
    app.add_handler(CommandHandler("theorem", theorem))
    app.add_handler(CommandHandler("check", check))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()

# –í–º–µ—Å—Ç–æ asyncio.run(main()) ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    import asyncio
    try:
        asyncio.get_event_loop().run_until_complete(main())
    except RuntimeError as e:
        if "already running" in str(e):
            loop = asyncio.get_event_loop()
            loop.create_task(main())
            loop.run_forever()
