import logging
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import aiohttp
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("BOT_TOKEN")
OWNER_IDS = list(map(int, os.getenv("OWNER_IDS", "").split(",")))
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# AI-–∑–∞–ø—Ä–æ—Å
async def ask_ai(prompt):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://t.me/YourBotUsername",  # –ó–∞–º–µ–Ω–∏ –Ω–∞ –∏–º—è —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
        "X-Title": "MathHelperBot"
    }
    json_data = {
        "model": "openrouter/meta-llama/llama-3-8b-instruct:free",
        "messages": [{"role": "user", "content": prompt}]
    }
    async with aiohttp.ClientSession() as session:
        async with session.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=json_data) as resp:
            data = await resp.json()
            return data["choices"][0]["message"]["content"]

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã!")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/task <–∑–∞–¥–∞—á–∞> - —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/check <—Ä–µ—à–µ–Ω–∏–µ> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ\n"
        "/definition <—Ç–µ—Ä–º–∏–Ω> - –¥–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ\n"
        "/formula <—Ç–µ–º–∞> - —Ñ–æ—Ä–º—É–ª–∞\n"
        "/theorem <–Ω–∞–∑–≤–∞–Ω–∏–µ> - —Ç–µ–æ—Ä–µ–º–∞"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
async def task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /task 2x + 3 = 7")
        return
    prompt = "–†–µ—à–∏ –∑–∞–¥–∞—á—É: " + ' '.join(context.args)
    response = await ask_ai(prompt)
    await update.message.reply_text(response)

async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —Ä–µ—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /check x = 3")
        return
    prompt = "–ü—Ä–æ–≤–µ—Ä—å —Ä–µ—à–µ–Ω–∏–µ: " + ' '.join(context.args)
    response = await ask_ai(prompt)
    await update.message.reply_text(response)

async def definition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —Ç–µ—Ä–º–∏–Ω. –ü—Ä–∏–º–µ—Ä: /definition –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è")
        return
    prompt = "–î–∞–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: " + ' '.join(context.args)
    response = await ask_ai(prompt)
    await update.message.reply_text(response)

async def formula(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —Ç–µ–º—É. –ü—Ä–∏–º–µ—Ä: /formula –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞")
        return
    prompt = "–§–æ—Ä–º—É–ª–∞: " + ' '.join(context.args)
    response = await ask_ai(prompt)
    await update.message.reply_text(response)

async def theorem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —Ç–µ–æ—Ä–µ–º—É. –ü—Ä–∏–º–µ—Ä: /theorem –ü–∏—Ñ–∞–≥–æ—Ä–∞")
        return
    prompt = "–û–±—ä—è—Å–Ω–∏ —Ç–µ–æ—Ä–µ–º—É: " + ' '.join(context.args)
    response = await ask_ai(prompt)
    await update.message.reply_text(response)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = update.message.text
    response = await ask_ai(prompt)
    await update.message.reply_text(response)

# –ó–∞–ø—É—Å–∫
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("task", task))
    app.add_handler(CommandHandler("check", check))
    app.add_handler(CommandHandler("definition", definition))
    app.add_handler(CommandHandler("formula", formula))
    app.add_handler(CommandHandler("theorem", theorem))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await app.updater.idle()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
