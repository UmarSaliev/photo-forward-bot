import logging
import os
from telegram import Update, InputFile
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, ContextTypes
)
from openai import OpenAI
from PIL import Image
import pytesseract
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ID –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–æ—Ç–∞ (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)
OWNER_IDS = {123456789}  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ Telegram ID

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /check
user_check_mode = set()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ò–ò. –û—Ç–ø—Ä–∞–≤—å /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start - –ù–∞—á–∞—Ç—å
/help - –ü–æ–º–æ—â—å
/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é –ò–ò
/task - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–∞—á—É
/definition - –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞
/formula - –§–æ—Ä–º—É–ª–∞ –ø–æ —Ç–µ–º–µ
/theorem - –¢–µ–æ—Ä–µ–º–∞ –ø–æ —Ç–µ–º–µ"
    )

async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_check_mode.add(update.effective_user.id)
    await update.message.reply_text("üîç –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_check_mode:
        user_check_mode.remove(user_id)
        question = update.message.text
        try:
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –†–µ—à–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ."},
                    {"role": "user", "content": question}
                ]
            )
            reply = response.choices[0].message.content
            await update.message.reply_text(f"‚úèÔ∏è –û—Ç–≤–µ—Ç: {reply}")
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenAI: {e}")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –Ø –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π /help")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    photo = update.message.photo[-1]
    file = await photo.get_file()
    image_bytes = await file.download_as_bytearray()
    image = Image.open(BytesIO(image_bytes))

    text = pytesseract.image_to_string(image)

    if user_id in user_check_mode:
        user_check_mode.remove(user_id)
        try:
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã –º–∞—Ç–µ–º–∞—Ç–∏–∫. –†–∞—Å–ø–æ–∑–Ω–∞–π –∑–∞–¥–∞—á—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–µ—à–∏ –µ—ë."},
                    {"role": "user", "content": text}
                ]
            )
            reply = response.choices[0].message.content
            await update.message.reply_text(f"üì∑ –ó–∞–¥–∞—á–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∏ —Ä–µ—à–µ–Ω–∞: {reply}")
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenAI: {e}")
    else:
        # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        for owner_id in OWNER_IDS:
            await context.bot.send_photo(chat_id=owner_id, photo=photo.file_id, caption=f"üì§ –§–æ—Ç–æ –æ—Ç @{update.effective_user.username or user_id}")

async def task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üß† –ü–æ–∫–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def definition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìò –ü–æ–∫–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def formula(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìê –ü–æ–∫–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def theorem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìè –ü–æ–∫–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def main():
    application = Application.builder().token(os.getenv("BOT_TOKEN")).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("check", check_command))
    application.add_handler(CommandHandler("task", task))
    application.add_handler(CommandHandler("definition", definition))
    application.add_handler(CommandHandler("formula", formula))
    application.add_handler(CommandHandler("theorem", theorem))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await application.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
