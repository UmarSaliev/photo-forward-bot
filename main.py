import os
import logging
from io import BytesIO
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import openai
import pytesseract
from PIL import Image

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN      = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OWNER_IDS_RAW  = os.getenv("OWNER_IDS", "")
OWNER_IDS      = [int(x) for x in OWNER_IDS_RAW.split(",") if x.strip().isdigit()]

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)
if not OPENAI_API_KEY:
    logger.error("‚ùå OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

openai.api_key = OPENAI_API_KEY

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ OpenAI —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏
async def ask_openai(prompt: str) -> str:
    try:
        resp = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.2,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenAI: {e}"

# --- /check —Ä–µ–∂–∏–º ---
async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["checking"] = True
    await update.message.reply_text(
        "üîç –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ –ò–ò."
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.pop("checking", False):
        prompt = f"–†–µ—à–∏ —ç—Ç—É –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –∏ –æ–±—ä—è—Å–Ω–∏ —à–∞–≥–∏:\n{update.message.text}"
        answer = await ask_openai(prompt)
        await update.message.reply_text(answer)
    else:
        await update.message.reply_text(
            "‚ÑπÔ∏è –ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞—á—É, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏—Ç–µ /check"
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —á–µ—Ä–µ–∑ OCR + –ò–ò
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.pop("checking", False):
        # –°–∫–∞—á–∞–µ–º —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
        photo = update.message.photo[-1]
        file = await photo.get_file()
        bio = BytesIO()
        await file.download_to_memory(bio)
        bio.seek(0)
        # OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        image = Image.open(bio)
        text = pytesseract.image_to_string(image)
        if not text.strip():
            return await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.")
        await update.message.reply_text(f"üìã –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{text}")
        prompt = f"–†–µ—à–∏ —ç—Ç—É –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –∏ –æ–±—ä—è—Å–Ω–∏ —à–∞–≥–∏:\n{text}"
        answer = await ask_openai(prompt)
        await update.message.reply_text(answer)
    else:
        # –ü–µ—Ä–µ—Å–ª–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –±–µ–∑ /check
        for oid in OWNER_IDS:
            await context.bot.forward_message(
                chat_id=oid,
                from_chat_id=update.effective_chat.id,
                message_id=update.message.message_id
            )
        await update.message.reply_text("üì® –§–æ—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º.")

# –ü—Ä–æ—á–∏–µ –∫–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ AJ. –ù–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/check      ‚Äî —Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ)\n"
        "/ping       ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å\n"
        "/status     ‚Äî —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/list       ‚Äî —Å–ø–∏—Å–æ–∫ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ (—Ç–æ–ª—å–∫–æ OWNER_IDS)\n"
        "/broadcast  ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ (—Ç–æ–ª—å–∫–æ OWNER_IDS)\n"
        "/task       ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É (–∑–∞–≥–ª—É—à–∫–∞)\n"
        "/definition ‚Äî –ø–æ–ª—É—á–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (–∑–∞–≥–ª—É—à–∫–∞)\n"
        "/formula    ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É (–∑–∞–≥–ª—É—à–∫–∞)\n"
        "/theorem    ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–æ—Ä–µ–º—É (–∑–∞–≥–ª—É—à–∫–∞)"
    )

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üèì Pong!")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")

async def list_owners(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id in OWNER_IDS:
        await update.message.reply_text(
            "üëë OWNER_IDS:\n" + "\n".join(map(str, OWNER_IDS))
        )
    else:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in OWNER_IDS:
        return await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—ã –º–æ–≥—É—Ç —Ä–∞—Å—Å—ã–ª–∞—Ç—å.")
    msg = " ".join(context.args)
    if not msg:
        return await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç>")
    for uid in OWNER_IDS:
        await context.bot.send_message(chat_id=uid, text=f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞:\n{msg}")
    await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")

async def task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìò –ü—Ä–∏—à–ª–∏—Ç–µ –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ /check.")

async def definition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìñ –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω —á–µ—Ä–µ–∑ /check.")

async def formula(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ûó –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É —á–µ—Ä–µ–∑ /check.")

async def theorem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìê –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–æ—Ä–µ–º—É —á–µ—Ä–µ–∑ /check.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("list", list_owners))
    app.add_handler(CommandHandler("broadcast", broadcast))
    app.add_handler(CommandHandler("task", task))
    app.add_handler(CommandHandler("definition", definition))
    app.add_handler(CommandHandler("formula", formula))
    app.add_handler(CommandHandler("theorem", theorem))
    app.add_handler(CommandHandler("check", check_command))
    # –•–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
