import logging
import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from dotenv import load_dotenv
import httpx

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_IDS = set(map(int, os.getenv("OWNER_IDS", "").split(",")))
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ===== OpenRouter AI Handler =====
async def ask_openrouter(prompt: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://t.me/YourBotUsername",  # –£–∫–∞–∂–∏ —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞
        "X-Title": "TelegramMathBot",
    }
    json_data = {
        "model": "mistralai/mixtral-8x7b",
        "messages": [{"role": "user", "content": prompt}],
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=json_data,
                timeout=20,
            )
            response.raise_for_status()
            return response.json()["choices"][0]["message"]["content"]
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ AI: {e}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ AI: {str(e)}"

# ===== –ö–æ–º–∞–Ω–¥—ã —Å –ò–ò =====
async def ai_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    command = update.message.text.split(" ")[0][1:]
    query = " ".join(context.args)
    if not query:
        await update.message.reply_text("üìå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return

    prompt_map = {
        "check": f"–ü—Ä–æ–≤–µ—Ä—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {query}",
        "task": f"–†–µ—à–∏ –∑–∞–¥–∞—á—É –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ: {query}",
        "definition": f"–î–∞–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {query}",
        "formula": f"–ù–∞–ø–∏—à–∏ —Ñ–æ—Ä–º—É–ª—É –ø–æ —Ç–µ–º–µ: {query}",
        "theorem": f"–û–±—ä—è—Å–Ω–∏ —Ç–µ–æ—Ä–µ–º—É: {query}",
    }

    prompt = prompt_map.get(command, query)
    answer = await ask_openrouter(prompt)
    await update.message.reply_text(answer)

# ===== –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ.\n"
        "üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/check [–ø—Ä–∏–º–µ—Ä] ‚Äì –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ\n"
        "/task [–∑–∞–¥–∞—á–∞] ‚Äì —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/definition [—Ç–µ–º–∞] ‚Äì –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ\n"
        "/formula [—Ç–µ–º–∞] ‚Äì —Ñ–æ—Ä–º—É–ª–∞\n"
        "/theorem [—Ç–µ–º–∞] ‚Äì —Ç–µ–æ—Ä–µ–º–∞\n"
        "/ping ‚Äì –ø–∏–Ω–≥\n"
        "/status ‚Äì —Å—Ç–∞—Ç—É—Å\n"
        "/broadcast [—Å–æ–æ–±—â–µ–Ω–∏–µ] ‚Äì —Ä–∞—Å—Å—ã–ª–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)\n",
        parse_mode="Markdown"
    )

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üèì Pong!")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def list_owners(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in OWNER_IDS:
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await update.message.reply_text(f"üëë –í–ª–∞–¥–µ–ª–µ—Ü(—ã): {', '.join(map(str, OWNER_IDS))}")

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in OWNER_IDS:
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    text = " ".join(context.args)
    if not text:
        return await update.message.reply_text("üìå –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    
    for user_id in OWNER_IDS:
        try:
            await context.bot.send_message(chat_id=user_id, text=f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞:\n\n{text}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")
    await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ.")

# ===== –ó–∞–ø—É—Å–∫ =====
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("list", list_owners))
    app.add_handler(CommandHandler("broadcast", broadcast))

    for cmd in ["check", "task", "definition", "formula", "theorem"]:
        app.add_handler(CommandHandler(cmd, ai_command))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
