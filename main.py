import logging
import os
import json
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)
import aiohttp
from dotenv import load_dotenv
import atexit
from threading import Timer
import copy

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("BOT_TOKEN")
OWNER_IDS = list(map(int, os.getenv("OWNER_IDS", "").split(","))) if os.getenv("OWNER_IDS") else []
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
BOT_USERNAME = "@JalilSupportBot"
USER_DATA_FILE = "user_data.json"
BACKUP_FILE = "user_data_backup.json"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
GET_NAME, BROADCAST = range(2)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ---
class UserDataManager:
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.data = cls._load_data()
            cls._instance.lock = False
        return cls._instance
    
    @staticmethod
    def _load_data():
        """–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        for file_path in [USER_DATA_FILE, BACKUP_FILE]:
            try:
                with open(file_path, 'r') as f:
                    return json.load(f)
            except (FileNotFoundError, json.JSONDecodeError):
                continue
        return {}
    
    def save(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π"""
        if self.lock or not self.data:
            return
            
        self.lock = True
        try:
            temp_file = f"{USER_DATA_FILE}.tmp"
            with open(temp_file, 'w') as f:
                json.dump(self.data, f, indent=2, ensure_ascii=False)
            
            if os.path.exists(USER_DATA_FILE):
                os.replace(USER_DATA_FILE, BACKUP_FILE)
            
            os.replace(temp_file, USER_DATA_FILE)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        finally:
            self.lock = False
    
    def get(self, user_id: str):
        return self.data.get(user_id, {})
    
    def set(self, user_id: str, full_name: str, username: str):
        self.data[user_id] = {
            "full_name": full_name,
            "username": username or "–Ω–µ—Ç_username"
        }
        self.save()
    
    def get_all(self):
        return copy.deepcopy(self.data)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
user_manager = UserDataManager()

# --- –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç ---
def auto_save():
    user_manager.save()
    Timer(300, auto_save).start()

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ ---
async def is_owner(user_id: int) -> bool:
    return user_id in OWNER_IDS

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start - –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    user_id = str(user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if user_manager.get(user_id):
        await update.message.reply_text(
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.full_name}!\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
        )
        return ConversationHandler.END
    
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø - –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –≤ —É—á–µ–±–µ.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–∫–∞–∫ –≤ —à–∫–æ–ª–µ):"
    )
    return GET_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    user = update.effective_user
    full_name = update.message.text
    user_id = str(user.id)
    
    user_manager.set(user_id, full_name, user.username)
    
    await update.message.reply_text(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ, {full_name}!\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
    )
    return ConversationHandler.END

# --- –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π)"""
    if not await is_owner(update.effective_user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π")
        return
    
    await update.message.reply_text(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é):\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
    )
    return BROADCAST

async def handle_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_data = user_manager.get_all()
    if not user_data:
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return ConversationHandler.END
    
    successful = 0
    failed = []
    
    try:
        # –†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–∞
        if update.message.text:
            for user_id in user_data:
                try:
                    await context.bot.send_message(
                        chat_id=int(user_id),
                        text=f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∏—Ç–µ–ª—è:\n\n{update.message.text}"
                    )
                    successful += 1
                except Exception as e:
                    failed.append(user_id)
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {user_id}: {e}")
        
        # –†–∞—Å—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ
        elif update.message.photo:
            photo = update.message.photo[-1].file_id
            caption = update.message.caption or ""
            for user_id in user_data:
                try:
                    await context.bot.send_photo(
                        chat_id=int(user_id),
                        photo=photo,
                        caption=f"üì¢ {caption}" if caption else "üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∏—Ç–µ–ª—è"
                    )
                    successful += 1
                except Exception as e:
                    failed.append(user_id)
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è {user_id}: {e}")
        
        # –û—Ç—á–µ—Ç
        report = f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {len(failed)}"
        if failed:
            report += f"\n\n–û—à–∏–±–∫–∏ —É ID: {', '.join(failed[:5])}{'...' if len(failed) > 5 else ''}"
        
        await update.message.reply_text(report)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ")
    
    return ConversationHandler.END

async def cancel_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await update.message.reply_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –æ—Ç —É—á–µ–Ω–∏–∫–æ–≤ ---
async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Ñ–æ—Ç–æ —É—á–µ–Ω–∏–∫–æ–≤ —É—á–∏—Ç–µ–ª—è–º (—Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑)"""
    try:
        if not update.message.photo:
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ñ–æ—Ç–æ

        user_id = str(update.effective_user.id)
        user_info = user_manager.get(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        base_caption = (
            f"üì© –û—Ç —É—á–µ–Ω–∏–∫–∞ {user_info.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n"
            f"@{user_info.get('username', '–Ω–µ—Ç_username')}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        full_caption = base_caption
        if update.message.caption:
            full_caption += f"\n\n{update.message.caption}"
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º —É—á–∏—Ç–µ–ª—è–º
        for teacher_id in OWNER_IDS:
            try:
                await context.bot.send_photo(
                    chat_id=teacher_id,
                    photo=update.message.photo[-1].file_id,
                    caption=full_caption if full_caption else None
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—á–∏—Ç–µ–ª—é {teacher_id}: {e}")
        
        await update.message.reply_text("‚úÖ –í–∞—à–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∏—Ç–µ–ª—è–º")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_media: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ")

# --- –ö–æ–º–∞–Ω–¥—ã –ò–ò ---
async def ask_ai(prompt: str, context: str = "") -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ò–ò —á–µ—Ä–µ–∑ OpenRouter"""
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": "openai/gpt-3.5-turbo",
        "messages": [
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": f"{context}\n\n{prompt}"}
        ]
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=payload
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    return data["choices"][0]["message"]["content"]
                else:
                    error = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ API: {error}")
                    return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ò–ò"

async def task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /task")
        return
    
    task = " ".join(context.args)
    await update.message.reply_text("üîç –†–µ—à–∞—é –∑–∞–¥–∞—á—É...")
    
    response = await ask_ai(
        f"–†–µ—à–∏ —ç—Ç—É –∑–∞–¥–∞—á—É –ø–æ —à–∞–≥–∞–º: {task}",
        "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –†–µ—à–∏ –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–æ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞."
    )
    
    await update.message.reply_text(f"üìö –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n\n{response}")

async def formula_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã"""
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /formula")
        return
    
    formula = " ".join(context.args)
    await update.message.reply_text("üîç –û–±—ä—è—Å–Ω—è—é —Ñ–æ—Ä–º—É–ª—É...")
    
    response = await ask_ai(
        f"–û–±—ä—è—Å–Ω–∏ —ç—Ç—É —Ñ–æ—Ä–º—É–ª—É: {formula}",
        "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –û–±—ä—è—Å–Ω–∏ —Ñ–æ—Ä–º—É–ª—É –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏."
    )
    
    await update.message.reply_text(f"üìñ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã:\n\n{response}")

async def theorem_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–æ—Ä–µ–º—ã"""
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–æ—Ä–µ–º—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /theorem")
        return
    
    theorem = " ".join(context.args)
    await update.message.reply_text("üîç –û–±—ä—è—Å–Ω—è—é —Ç–µ–æ—Ä–µ–º—É...")
    
    response = await ask_ai(
        f"–û–±—ä—è—Å–Ω–∏ —ç—Ç—É —Ç–µ–æ—Ä–µ–º—É: {theorem}",
        "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –û–±—ä—è—Å–Ω–∏ —Ç–µ–æ—Ä–µ–º—É —Å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏."
    )
    
    await update.message.reply_text(f"üìñ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–æ—Ä–µ–º—ã:\n\n{response}")

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /search")
        return
    
    query = " ".join(context.args)
    await update.message.reply_text("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
    
    response = await ask_ai(
        f"–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}",
        "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –î–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏."
    )
    
    await update.message.reply_text(f"üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n{response}")

# --- –ö–æ–º–∞–Ω–¥–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π)"""
    if not await is_owner(update.effective_user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π")
        return
    
    user_data = user_manager.get_all()
    if not user_data:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    
    message = ["üìù –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"]
    for user_id, data in user_data.items():
        message.append(
            f"üë§ {data.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} "
            f"(@{data.get('username', '–Ω–µ—Ç_username')}) "
            f"ID: {user_id}"
        )
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    full_message = "\n".join(message)
    for i in range(0, len(full_message), 4096):
        await update.message.reply_text(full_message[i:i+4096])

# --- –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è help-–∫–æ–º–∞–Ω–¥–∞ ---
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/task - –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/formula - –û–±—ä—è—Å–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É\n"
        "/theorem - –û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–æ—Ä–µ–º—É\n"
        "/search - –ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
    )
    
    if await is_owner(update.effective_user.id):
        help_text += (
            "\nüë®‚Äçüè´ –ö–æ–º–∞–Ω–¥—ã —É—á–∏—Ç–µ–ª—è:\n"
            "/list - –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤\n"
            "/broadcast - –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"
        )
    
    await update.message.reply_text(help_text)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(MessageHandler(filters.PHOTO, handle_media))  # –õ–æ–≤–∏–º –í–°–ï —Ñ–æ—Ç–æ
    
    # ConversationHandler –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("broadcast", broadcast_command)],
        states={
            BROADCAST: [
                MessageHandler(filters.TEXT | filters.PHOTO, handle_broadcast),
                CommandHandler("cancel", cancel_broadcast)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel_broadcast)]
    ))
    
    # ConversationHandler –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={GET_NAME: [MessageHandler(filters.TEXT, get_name)]},
        fallbacks=[]
    ))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    commands = [
        ("help", help_command),
        ("task", task_command),
        ("formula", formula_command),
        ("theorem", theorem_command),
        ("search", search_command),
        ("list", list_command)
    ]
    for cmd, handler in commands:
        app.add_handler(CommandHandler(cmd, handler))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    app.add_error_handler(lambda u, c: logger.error(c.error))
    
    # –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    auto_save()
    atexit.register(user_manager.save)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —Ñ—É–Ω–∫—Ü–∏–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
    app.run_polling()

if __name__ == "__main__":
    main()
