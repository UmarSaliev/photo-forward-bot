import os
import logging
import httpx
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_IDS = set(map(int, os.getenv("OWNER_IDS", "").split(",")))
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# === OpenRouter Chat Completion ===
async def ask_openrouter(prompt: str) -> str:
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://yourapp.com",
        "X-Title": "MathBot",
    }
    payload = {
        "model": "openrouter/cinematika-7b",  # –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –ª—é–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π
        "messages": [{"role": "user", "content": prompt}],
    }
    async with httpx.AsyncClient() as client:
        response = await client.post(url, json=payload, headers=headers, timeout=60)
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"]


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π AI. –û—Ç–ø—Ä–∞–≤—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/check\n/task\n/definition\n/formula\n/theorem\n/ping\n/status")

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üèì Pong!")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")

async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in OWNER_IDS:
        await update.message.reply_text("–¢—ã –≤–ª–∞–¥–µ–ª–µ—Ü. –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç.")
    else:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text.startswith(("/check", "/task", "/definition", "/formula", "/theorem")):
        command, *prompt = text.split(maxsplit=1)
        prompt_text = prompt[0] if prompt else "–û–±—ä—è—Å–Ω–∏ —ç—Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
        reply = await ask_openrouter(f"{command} {prompt_text}")
        await update.message.reply_text(reply)
    else:
        reply = await ask_openrouter(text)
        await update.message.reply_text(reply)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ===
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in OWNER_IDS and update.message.caption and update.message.caption.startswith("/check"):
        await update.message.reply_text("‚õî –í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ.")
        return

    await update.message.reply_text("üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... (–Ω–æ –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)")
