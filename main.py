import os
import logging
from io import BytesIO
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import openai

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN        = os.getenv("BOT_TOKEN")
OPENAI_API_KEY   = os.getenv("OPENAI_API_KEY")
OWNER_IDS        = [int(x) for x in os.getenv("OWNER_IDS", "").split(",") if x.strip().isdigit()]

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
    exit(1)
if not OPENAI_API_KEY:
    logger.warning("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî /check –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

openai.api_key = OPENAI_API_KEY

# --- –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["checking"] = True
    await update.message.reply_text("üîç –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ ---
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.pop("checking", False):
        prompt = f"–†–µ—à–∏ —ç—Ç—É –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –∏ –æ–±—ä—è—Å–Ω–∏ —à–∞–≥–∏:\n{update.message.text}"
        try:
            resp = await openai.ChatCompletion.acreate(
                model="gpt-4",
                messages=[{"role":"user", "content":prompt}],
                temperature=0.2
            )
            answer = resp.choices[0].message.content.strip()
        except Exception as e:
            answer = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}"
        await update.message.reply_text(answer)
    else:
        # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ
        await update.message.reply_text("‚ÑπÔ∏è –ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞—á—É, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏—Ç–µ /check")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ---
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.pop("checking", False):
        # —Å–∫–∞—á–∏–≤–∞–µ–º bytes
        photo = update.message.photo[-1]
        f = await photo.get_file()
        buf = BytesIO()
        await f.download_to_memory(buf)
        data = buf.getvalue()
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Base64-URI –≤ OpenAI (—á–µ—Ä–µ–∑ GPT-4 Vision –∏–ª–∏ –∞–Ω–∞–ª–æ–≥)
        prompt = "–†–µ—à–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
        try:
            b64 = __import__("base64").b64encode(data).decode()
            resp = await openai.ChatCompletion.acreate(
                model="gpt-4o",
                messages=[
                  {"role":"user","content":prompt},
                  {"role":"user","content":[
                    {"type":"image_url","image_url":{"url":f"data:image/jpeg;base64,{b64}"}}  
                  ]}
                ]
            )
            answer = resp.choices[0].message.content.strip()
        except Exception as e:
            answer = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}"
        await update.message.reply_text(answer)
    else:
        # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
        for oid in OWNER_IDS:
            await context.bot.forward_message(
                chat_id=oid,
                from_chat_id=update.effective_chat.id,
                message_id=update.message.message_id
            )
        await update.message.reply_text("üì® –§–æ—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º.")

# --- –ü—Ä–æ—á–∏–µ –∫–æ–º–∞–Ω–¥—ã-–∑–∞–≥–ª—É—à–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç‚Äë–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. /help")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/check ‚Äî –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á–∏\n"
        "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å OWNER_IDS (—Ç–æ–ª—å–∫–æ –∏–º)\n"
        "/broadcast ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ (—Ç–æ–ª—å–∫–æ OWNER_IDS)\n"
        "/task ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–∞—á–∞ (–∑–∞–≥–ª—É—à–∫–∞)\n"
        "/definition ‚Äî –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (–∑–∞–≥–ª—É—à–∫–∞)\n"
        "/formula ‚Äî —Ñ–æ—Ä–º—É–ª–∞ (–∑–∞–≥–ª—É—à–∫–∞)\n"
        "/theorem ‚Äî —Ç–µ–æ—Ä–µ–º–∞ (–∑–∞–≥–ª—É—à–∫–∞)"
    )

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üèì Pong!")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤.")

async def list_owners(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id in OWNER_IDS:
        await update.message.reply_text("üëë OWNER_IDS:\n" + "\n".join(map(str, OWNER_IDS)))
    else:
        await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in OWNER_IDS:
        return await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ OWNER_IDS.")
    msg = " ".join(context.args)
    if not msg:
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /broadcast")
    for uid in OWNER_IDS:
        await context.bot.send_message(chat_id=uid, text=f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞:\n{msg}")
    await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

async def task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìò –ü—Ä–∏—à–ª–∏ –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ /check")

async def definition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìñ –ü—Ä–∏—à–ª–∏ —Ç–µ—Ä–º–∏–Ω —á–µ—Ä–µ–∑ /check")

async def formula(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ûó –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ä–º—É–ª—É —á–µ—Ä–µ–∑ /check")

async def theorem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìê –ü—Ä–∏—à–ª–∏ —Ç–µ–æ—Ä–µ–º—É —á–µ—Ä–µ–∑ /check")

# --- –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ ---
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # Handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("list", list_owners))
    app.add_handler(CommandHandler("broadcast", broadcast))
    app.add_handler(CommandHandler("check", check_command))
    app.add_handler(CommandHandler("task", task))
    app.add_handler(CommandHandler("definition", definition))
    app.add_handler(CommandHandler("formula", formula))
    app.add_handler(CommandHandler("theorem", theorem))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
