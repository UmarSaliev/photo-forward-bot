import os import logging from telegram import Update, InputFile from telegram.ext import ( ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ) import openai from io import BytesIO import base64

–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

logging.basicConfig(level=logging.INFO) logger = logging.getLogger(name)

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

BOT_TOKEN = os.getenv("BOT_TOKEN") OWNER_IDS = [int(uid.strip()) for uid in os.getenv("OWNER_IDS", "").split(",") if uid.strip().isdigit()] OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not BOT_TOKEN: logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!") exit(1)

if not OPENAI_API_KEY: logger.warning("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω, /check –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")

openai.api_key = OPENAI_API_KEY

–•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è /check –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

user_check_mode = set()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE): await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ AJ. –ù–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE): await update.message.reply_text( "/start ‚Äî –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n" "/help ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n" "/ping ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞\n" "/status ‚Äî –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n" "/task ‚Äî –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞\n" "/definition ‚Äî –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ\n" "/formula ‚Äî –§–æ—Ä–º—É–ª–∞\n" "/theorem ‚Äî –¢–µ–æ—Ä–µ–º–∞\n" "/check ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò\n" "/list ‚Äî –°–ø–∏—Å–æ–∫ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è OWNER_IDS)\n" "/broadcast ‚Äî –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è OWNER_IDS)" )

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE): await update.message.reply_text("üèì Pong!")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE): await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def list_owners(update: Update, context: ContextTypes.DEFAULT_TYPE): if update.effective_user.id in OWNER_IDS: owners = "\n".join(map(str, OWNER_IDS)) await update.message.reply_text(f"üëë –í–ª–∞–¥–µ–ª–µ—Ü(—ã):\n{owners}") else: await update.message.reply_text("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤.")

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE): if update.effective_user.id not in OWNER_IDS: return await update.message.reply_text("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤.") message = " ".join(context.args) if not message: return await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç>") for user_id in OWNER_IDS: try: await context.bot.send_message(chat_id=user_id, text=f"[Broadcast]\n{message}") except Exception as e: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}") await update.message.reply_text("üì£ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º.")

async def process_text_ai(text: str) -> str: if not OPENAI_API_KEY: return "‚ùå OpenAI API –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω!" try: response = openai.ChatCompletion.create( model="gpt-4o", messages=[{"role": "user", "content": text}], ) return response.choices[0].message.content.strip() except Exception as e: return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ò–ò: {e}"

async def process_photo_ai(file_bytes: bytes) -> str: if not OPENAI_API_KEY: return "‚ùå OpenAI API –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω!" try: base64_image = base64.b64encode(file_bytes).decode("utf-8") response = openai.ChatCompletion.create( model="gpt-4o", messages=[ {"role": "user", "content": "–†–µ—à–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."}, { "role": "user", "content": [ { "type": "image_url", "image_url": { "url": f"data:image/jpeg;base64,{base64_image}" }, } ], }, ], ) return response.choices[0].message.content.strip() except Exception as e: return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"

async def check(update: Update, context: ContextTypes.DEFAULT_TYPE): user_check_mode.add(update.effective_user.id) await update.message.reply_text("üì∑ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE): uid = update.effective_user.id if uid in user_check_mode: user_check_mode.remove(uid) response = await process_text_ai(update.message.text) await update.message.reply_text(response) else: await update.message.reply_text("‚úèÔ∏è –¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω. –ù–∞–ø–∏—à–∏ /check, —á—Ç–æ–±—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE): uid = update.effective_user.id photo = update.message.photo[-1] file = await photo.get_file() file_bytes = await file.download_as_bytearray()

if uid in user_check_mode:
    user_check_mode.remove(uid)
    response = await process_photo_ai(file_bytes)
    await update.message.reply_text(response)
else:
    for owner_id in OWNER_IDS:
        try:
            await context.bot.send_photo(chat_id=owner_id, photo=InputFile(BytesIO(file_bytes), filename="photo.jpg"))
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}: {e}")
    await update.message.reply_text("üì® –§–æ—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º.")

async def task(update: Update, context: ContextTypes.DEFAULT_TYPE): await update.message.reply_text("üìö –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ /check.")

async def definition(update: Update, context: ContextTypes.DEFAULT_TYPE): await update.message.reply_text("üß† –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω, –∏ —è –æ–±—ä—è—Å–Ω—é –µ–≥–æ —á–µ—Ä–µ–∑ /check.")

async def formula(update: Update, context: ContextTypes.DEFAULT_TYPE): await update.message.reply_text("‚ûó –ù–∞–ø–∏—à–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É, –∏ —è –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å —ë—ë —á–µ—Ä–µ–∑ /check.")

async def theorem(update: Update, context: ContextTypes.DEFAULT_TYPE): await update.message.reply_text("üìê –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–æ—Ä–µ–º—É, –∏ —è –æ–±—ä—è—Å–Ω—é —ë—ë —á–µ—Ä–µ–∑ /check.")

async def main(): app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("ping", ping))
app.add_handler(CommandHandler("status", status))
app.add_handler(CommandHandler("list", list_owners))
app.add_handler(CommandHandler("broadcast", broadcast))
app.add_handler(CommandHandler("check", check))
app.add_handler(CommandHandler("task", task))
app.add_handler(CommandHandler("definition", definition))
app.add_handler(CommandHandler("formula", formula))
app.add_handler(CommandHandler("theorem", theorem))

app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))
app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
await app.run_polling()

if name == "main": import asyncio asyncio.run(main())

