import os
import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes
)
from openai import OpenAI

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OWNER_IDS = [int(i) for i in os.getenv("OWNER_IDS", "").split(",") if i]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
openai_client = OpenAI(api_key=OPENAI_API_KEY)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
user_modes = {}

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ.\n"
        "/start - –ù–∞—á–∞—Ç—å\n"
        "/help - –ü–æ–º–æ—â—å\n"
        "/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/task - –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞\n"
        "/definition - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ\n"
        "/formula - –§–æ—Ä–º—É–ª–∞\n"
        "/theorem - –¢–µ–æ—Ä–µ–º–∞"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ —Ñ–æ—Ç–æ!")

async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_modes[user_id] = "check"
    await update.message.reply_text("üîç –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")

async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id in OWNER_IDS:
        users = list(user_modes.keys())
        await update.message.reply_text(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users}")
    else:
        await update.message.reply_text("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    mode = user_modes.get(user_id)

    if mode == "check":
        try:
            response = openai_client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –û—Ç–≤–µ—á–∞–π –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."},
                    {"role": "user", "content": text}
                ]
            )
            answer = response.choices[0].message.content
            await update.message.reply_text(f"üìò –û—Ç–≤–µ—Ç:\n{answer}")
        except Exception as e:
            logger.error(f"OpenAI Error: {e}")
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenAI:\n\n{e}")
        finally:
            user_modes.pop(user_id, None)
    else:
        await update.message.reply_text("‚úâÔ∏è –ù–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏ /check –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    mode = user_modes.get(user_id)

    if mode == "check":
        file = await update.message.photo[-1].get_file()
        photo_bytes = await file.download_as_bytearray()
        await update.message.reply_text("üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –∑–∞–¥–∞—á–∏. –Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å.")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OCR
        user_modes.pop(user_id, None)
    elif user_id in OWNER_IDS:
        return
    else:
        for owner in OWNER_IDS:
            await context.bot.forward_message(chat_id=owner, from_chat_id=update.message.chat_id, message_id=update.message.message_id)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìå –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: 2x + 5 = 11. –ù–∞–π–¥–∏ x.")

async def definition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìö –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: –ü–∞—Ä–∞–±–æ–ª–∞ ‚Äî —ç—Ç–æ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ –º–µ—Å—Ç–æ —Ç–æ—á–µ–∫, —Ä–∞–≤–Ω–æ—É–¥–∞–ª—ë–Ω–Ω—ã—Ö –æ—Ç —Ñ–æ–∫—É—Å–∞ –∏ –¥–∏—Ä–µ–∫—Ç—Ä–∏—Å—ã.")

async def formula(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìê –§–æ—Ä–º—É–ª–∞ –ø–ª–æ—â–∞–¥–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞: S = 1/2 * a * h")

async def theorem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìè –¢–µ–æ—Ä–µ–º–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞: a¬≤ + b¬≤ = c¬≤")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("check", check))
    application.add_handler(CommandHandler("task", task))
    application.add_handler(CommandHandler("definition", definition))
    application.add_handler(CommandHandler("formula", formula))
    application.add_handler(CommandHandler("theorem", theorem))
    application.add_handler(CommandHandler("list", list_users))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()
