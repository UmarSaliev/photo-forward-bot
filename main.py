import logging
import os
import io
import base64
import httpx
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_IDS = set(map(int, os.getenv("OWNER_IDS", "").split(",")))
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

MODEL_ID = "openrouter/anthropic/claude-3-haiku"

logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≥–ª–∞–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –º–∏—Å—Ç–µ—Ä–∞ –ê–±–¥—É–∂–∞–ª–∏–ª–∞ ü§ì. "
        "–¢—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –º–Ω–µ –∑–∞–¥–∞—á–∏, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –∏ —è –ø–µ—Ä–µ–¥–∞–º –∏—Ö –µ–º—É üöÄ. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ç–∫–æ –≤—ã–¥–µ–ª–∏ —Å–∞–º—É –∑–∞–¥–∞—á—É –∏ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –æ–±—ä—è—Å–Ω–∏—Ç—å, –≤ —á–µ–º —Ç—ã –∑–∞–ø—É—Ç–∞–ª—Å—è üíØ.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_markdown_v2(
        "üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/check \\- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è –ø–æ —Ñ–æ—Ç–æ\n"
        "/task \\- –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞\n"
        "/definition \\- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞\n"
        "/formula \\- –§–æ—Ä–º—É–ª–∞ –ø–æ —Ç–µ–º–µ\n"
        "/theorem \\- –¢–µ–æ—Ä–µ–º–∞ –∏ –ø—Ä–∏–º–µ—Ä"
    )

async def image_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in OWNER_IDS and context.user_data.get("mode") == "check":
        await update.message.reply_text("‚ö†Ô∏è –í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /check –Ω–∞ —Ñ–æ—Ç–æ.")
        return

    photo = await update.message.photo[-1].get_file()
    photo_bytes = await photo.download_as_bytearray()

    image_b64 = base64.b64encode(photo_bytes).decode("utf-8")
    prompt = f"–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞–¥–∞—á–∞ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –ü–æ–º–æ–≥–∏ —Ä–µ—à–∏—Ç—å –µ—ë –ø–æ—à–∞–≥–æ–≤–æ."

    result = await ask_openrouter(prompt, image_b64)
    await update.message.reply_text(result or "‚ö†Ô∏è –û—à–∏–±–∫–∞ AI")

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    result = await ask_openrouter(text)
    await update.message.reply_text(result or "‚ö†Ô∏è –û—à–∏–±–∫–∞ AI")

async def ask_openrouter(prompt, image_b64=None):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://t.me/YourBot",  # —É–∫–∞–∂–∏ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
        "X-Title": "Telegram Math Bot",
    }
    messages = [{"role": "user", "content": prompt}]
    if image_b64:
        messages[0]["content"] = [
            {"type": "text", "text": prompt},
            {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{image_b64}"}},
        ]

    data = {
        "model": MODEL_ID,
        "messages": messages,
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=data,
                timeout=60
            )
            if response.status_code != 200:
                return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ AI: –∫–æ–¥ {response.status_code}"
            return response.json()["choices"][0]["message"]["content"]
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ AI: {str(e)}"

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.PHOTO, image_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.run_polling()

if __name__ == "__main__":
    main()
